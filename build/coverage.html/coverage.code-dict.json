{"/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/test.js":"/* istanbul instrument in package npmtest_webpack_spritesmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/lib.npmtest_webpack_spritesmith.js":"/* istanbul instrument in package npmtest_webpack_spritesmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webpack_spritesmith = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webpack_spritesmith = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webpack-spritesmith && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webpack_spritesmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webpack_spritesmith\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webpack_spritesmith.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webpack_spritesmith.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webpack_spritesmith.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webpack_spritesmith.__dirname + '/lib.npmtest_webpack_spritesmith.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/node_modules/webpack-spritesmith/lib/Plugin.js":"var gaze = require('gaze');\r\nvar glob = require('glob');\r\nvar async = require('async');\r\n\r\nvar processOptions = require('./processOptions');\r\n\r\nfunction SpritesmithPlugin(options) {\r\n    this.options = processOptions(options);\r\n    this.useRetinaTemplates = 'retina' in this.options;\r\n    this.cleanMetaOutput();\r\n}\r\n\r\nfunction fThrow(x) { throw x; }\r\n\r\nSpritesmithPlugin.prototype = {\r\n    cleanMetaOutput: function () {\r\n        this.metaOutput = {\r\n            warnings: [],\r\n            errors: []\r\n        };\r\n    },\r\n    apply: function (compiler) {\r\n        compiler.plugin('run', function (compiler, callback) {\r\n            return this.compile(callback);\r\n        }.bind(this));\r\n\r\n        var watchStarted = false;\r\n        compiler.plugin('watch-run', function (watching, watchRunCallback) {\r\n            if (watchStarted) {\r\n                return watchRunCallback();\r\n            }\r\n            watchStarted = true;\r\n            gaze(\r\n                this.options.src.glob,\r\n                {cwd: this.options.src.cwd},\r\n                function (err, gaze) {\r\n                    err && fThrow(err);\r\n                    gaze.on('all', function () {\r\n                        this.compile(function () {});\r\n                    }.bind(this));\r\n                }.bind(this)\r\n            );\r\n            return this.compile(watchRunCallback);\r\n        }.bind(this));\r\n\r\n        compiler.plugin('emit', function (compilation, callback) {\r\n            compilation.errors = compilation.errors.concat(this.metaOutput.errors);\r\n            compilation.warnings = compilation.warnings.concat(this.metaOutput.warnings);\r\n            callback();\r\n        }.bind(this));\r\n    },\r\n    compile: function (compileCallback) {\r\n        var src = this.options.src;\r\n\r\n        var compileStrategy = this.useRetinaTemplates\r\n            ? require('./compileRetina')\r\n            : require('./compileNormal');\r\n\r\n        async.waterfall([\r\n            glob.bind(null, src.glob, {cwd: src.cwd}),\r\n            compileStrategy.bind(null, this.options, this.metaOutput)\r\n        ], compileCallback);\r\n    }\r\n};\r\n\r\nmodule.exports = SpritesmithPlugin;\r\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/node_modules/webpack-spritesmith/lib/processOptions.js":"var _ = require('lodash');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\nvar templater = require('spritesheet-templates');\r\n\r\nfunction fThrowExpectField(f) { throw 'Expected field\"' + f + '\" in options of SpritesmithPlugin' }\r\n\r\nmodule.exports = function (rawOptions) {\r\n    rawOptions.src || fThrowExpectField('src');\r\n    rawOptions.src.cwd || fThrowExpectField('src.cwd');\r\n    rawOptions.src.glob || fThrowExpectField('src.glob');\r\n    rawOptions.target || fThrowExpectField('target');\r\n    rawOptions.target.css || fThrowExpectField('target.css');\r\n    rawOptions.target.image || fThrowExpectField('target.image');\r\n\r\n    var mergedOptions = _.merge({}, {\r\n        apiOptions: {\r\n            generateSpriteName: function (fileName) {\r\n                return path.parse(path.relative(mergedOptions.src.cwd, fileName)).name;\r\n            },\r\n            cssImageRef: rawOptions.target.image,\r\n            customTemplates: {}\r\n        },\r\n        spritesmithOptions: {},\r\n        spritesheetTemplatesOptions: {}\r\n    }, rawOptions);\r\n\r\n    normalizeTargetCss(mergedOptions);\r\n\r\n    mergedOptions.target.css.forEach(function (css, i) {\r\n        if (!css[1].format) {\r\n            throw 'SpritesmithPlugin was unable to derive ' +\r\n            'css format from extension \"' + path.parse(css[0] || '').ext + '\" ' +\r\n            'in \"target.css[' + i + ']\" and format was not specified explicitly';\r\n        }\r\n    });\r\n\r\n    _.forEach(mergedOptions.customTemplates, function (template, templateName) {\r\n        if (typeof template === 'string') {\r\n            templater.addHandlebarsTemplate(templateName, fs.readFileSync(template, 'utf-8'));\r\n        } else if (typeof template === 'function') {\r\n            templater.addTemplate(templateName, template);\r\n        } else {\r\n            throw new Error('custom template can be either path/to/handlebars/template or actual template function');\r\n        }\r\n    });\r\n\r\n    processRetinaOptions(mergedOptions);\r\n\r\n    return mergedOptions;\r\n};\r\n\r\nfunction normalizeTargetCss(mergedOptions) {\r\n    var css = mergedOptions.target.css;\r\n\r\n    if (!(css instanceof Array)) {\r\n        css = [[css, mergedOptions.spritesheetTemplatesOptions]];\r\n    }\r\n\r\n    mergedOptions.target.css = css.map(normalizeOne);\r\n\r\n    function normalizeOne(css, i) {\r\n        if (typeof css === 'string') {\r\n            return [css, {\r\n                format: extractFormatFromCSSFilename(css)\r\n            }];\r\n        } else if (css instanceof Array) {\r\n            var cssCopy = css.slice(0);\r\n            if (cssCopy.length < 2) {\r\n                cssCopy[1] = {};\r\n            }\r\n            if (!('format' in cssCopy[1])) {\r\n                cssCopy[1].format = extractFormatFromCSSFilename(cssCopy[0]);\r\n            }\r\n            return cssCopy;\r\n        } else {\r\n            throw new Error('target.css[' + i + '] must be String or Array');\r\n        }\r\n    }\r\n}\r\n\r\nvar extensionToCssFormat = {\r\n    '.stylus': 'stylus',\r\n    '.styl': 'stylus',\r\n    '.sass': 'sass',\r\n    '.scss': 'scss',\r\n    '.less': 'less',\r\n    '.json': 'json',\r\n    '.css': 'css'\r\n};\r\n\r\nfunction extractFormatFromCSSFilename(cssFileName) {\r\n    return extensionToCssFormat[path.parse(cssFileName).ext];\r\n}\r\n\r\nfunction processRetinaOptions(options) {\r\n    if (!('retina' in options)) {\r\n        return;\r\n    }\r\n\r\n    if (typeof options.retina === 'string') {\r\n        var suffix = options.retina;\r\n        var r = options.retina = {\r\n            classifier: suffixToClassifier(suffix)\r\n        };\r\n\r\n        r.targetImage = r.targetImage || addSuffixToFileName(suffix, options.target.image, path);\r\n        r.cssImageRef = r.cssImageRef || addSuffixToFileName(suffix, options.apiOptions.cssImageRef, path.posix);\r\n    } else {\r\n        options.retina.classifier || fThrowExpectField('retina.classifier');\r\n        options.retina.targetImage || fThrowExpectField('retina.targetImage');\r\n        options.retina.cssImageRef || fThrowExpectField('retina.cssImageRef');\r\n    }\r\n\r\n    options.target.css.forEach(function (css) {\r\n        css[1].format += '_retina';\r\n    });\r\n}\r\n\r\nfunction suffixToClassifier(suffix) {\r\n    return function (fileName) {\r\n        var parsed = splitExt(fileName);\r\n        if (hasSuffix(suffix, parsed.name)) {\r\n            return {\r\n                type: 'retina',\r\n                retinaName: fileName,\r\n                normalName: parsed.name.slice(0, -suffix.length) + parsed.ext\r\n            };\r\n        }\r\n        return {\r\n            type: 'normal',\r\n            retinaName: parsed.name + suffix + parsed.ext,\r\n            normalName: fileName\r\n        };\r\n    };\r\n}\r\n\r\nfunction hasSuffix(suffix, str) {\r\n    return str.slice(-suffix.length) === suffix;\r\n}\r\n\r\nfunction splitExt(fileName) {\r\n    var extInd = fileName.lastIndexOf('.');\r\n    var ext = fileName.slice(extInd);\r\n    var name = fileName.slice(0, extInd);\r\n    return {\r\n        name: name,\r\n        ext: ext\r\n    };\r\n}\r\n\r\nfunction addSuffixToFileName(suffix, fileName, pathImpl) {\r\n    var parsed = pathImpl.parse(fileName);\r\n    parsed.name += suffix;\r\n    parsed.base = parsed.name + parsed.ext;\r\n    return pathImpl.format(parsed);\r\n}\r\n\r\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/node_modules/webpack-spritesmith/lib/compileNormal.js":"var Spritesmith = require('spritesmith');\r\nvar path = require('path');\r\nvar async = require('async');\r\nvar _ = require('lodash');\r\n\r\nvar substitute = require('./substitute');\r\nvar writeCSS = require('./writeCSS');\r\nvar writeFileR = require('./writeFileR');\r\n\r\nmodule.exports = function (options, metaOutput, srcFiles, callback) {\r\n    var spritesmithOptions = _.assign({\r\n        src: srcFiles.map(function (filename) {\r\n            return path.resolve(options.src.cwd, filename);\r\n        })\r\n    }, options.spritesmithOptions);\r\n\r\n    async.waterfall([\r\n        Spritesmith.run.bind(Spritesmith, spritesmithOptions),\r\n        function emitFiles(spritesmithResult, callback) {\r\n            var imageNameWithSubstitutions = substitute(options.target.image, spritesmithResult);\r\n            async.parallel([\r\n                writeCSS.bind(null, options.target.css, toSpritesheetTemplatesFormat(spritesmithResult)),\r\n                writeFileR.bind(null, imageNameWithSubstitutions, spritesmithResult.image, 'binary')\r\n            ], callback);\r\n        }\r\n    ], function (err) {\r\n        if (err) {\r\n            metaOutput.errors.push(err);\r\n        }\r\n        callback();\r\n    });\r\n\r\n    function toSpritesheetTemplatesFormat(spritesmithResult) {\r\n        var generateSpriteName = options.apiOptions.generateSpriteName;\r\n        var sprites = _.map(\r\n            spritesmithResult.coordinates,\r\n            function (oneSourceInfo, fileName) {\r\n                return _.assign(\r\n                    {name: generateSpriteName(fileName)},\r\n                    oneSourceInfo\r\n                );\r\n            }\r\n        );\r\n        var imageRefWithSubstitutions = substitute(options.apiOptions.cssImageRef, spritesmithResult);\r\n        var spritesheet = _.assign(\r\n            {image: imageRefWithSubstitutions},\r\n            spritesmithResult.properties\r\n        );\r\n\r\n        return {\r\n            sprites: sprites,\r\n            spritesheet: spritesheet\r\n        };\r\n    }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/node_modules/webpack-spritesmith/lib/substitute.js":"var loaderUtils = require('loader-utils');\r\nvar path = require('path').posix;\r\n\r\nmodule.exports = function (fullName, spritesmithResult) {\r\n    var parsed = path.parse(fullName);\r\n\r\n    parsed.base = loaderUtils.interpolateName(\r\n        {},\r\n        parsed.base,\r\n        {content: spritesmithResult.image}\r\n    );\r\n\r\n    return path.format(parsed);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/node_modules/webpack-spritesmith/lib/writeCSS.js":"var async = require('async');\r\nvar writeFileR = require('./writeFileR');\r\nvar spritesheetTemplater = require('spritesheet-templates');\r\n\r\nmodule.exports = function writeCSS(sources, templaterData, callback) {\r\n    var apis = sources.map(function (css) {\r\n        return {\r\n            file: css[0],\r\n            code: spritesheetTemplater(templaterData, css[1])\r\n        };\r\n    });\r\n\r\n    async.forEach(apis, function (api, callback) {\r\n        writeFileR(\r\n            api.file,\r\n            api.code,\r\n            callback\r\n        );\r\n    }, callback);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/node_modules/webpack-spritesmith/lib/writeFileR.js":"var async = require('async');\r\nvar mkdirp = require('mkdirp');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\n\r\nmodule.exports = function (fileName) {\r\n    var args = Array.prototype.slice.call(arguments);\r\n    var callback = arguments[arguments.length - 1];\r\n    async.series([\r\n        mkdirp.bind(null, path.dirname(fileName)),\r\n        function (callback) {\r\n            args[args.length - 1] = callback;\r\n            return fs.writeFile.apply(fs, args);\r\n        }\r\n    ], callback);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-webpack-spritesmith/node_modules/webpack-spritesmith/lib/compileRetina.js":"var Spritesmith = require('spritesmith');\r\nvar path = require('path');\r\nvar async = require('async');\r\nvar _ = require('lodash');\r\n\r\nvar substitute = require('./substitute');\r\nvar writeCSS = require('./writeCSS');\r\nvar writeFileR = require('./writeFileR');\r\n\r\nmodule.exports = function (options, metaOutput, srcFiles, callback) {\r\n    var classifiedSources = srcFiles.map(function (fileName) {\r\n        return options.retina.classifier(path.resolve(options.src.cwd, fileName));\r\n    });\r\n    var grouppedSources = classifiedSources.reduce(function (acc, source) {\r\n        var name = options.apiOptions.generateSpriteName(source.normalName);\r\n        if (!(name in acc)) {\r\n            acc[name] = {\r\n                apiName: name,\r\n                normalName: source.normalName,\r\n                retinaName: source.retinaName\r\n            }\r\n        }\r\n\r\n        acc[name][source.type] = true;\r\n\r\n        return acc;\r\n    }, {});\r\n\r\n    collectErrors();\r\n    if (metaOutput.errors.length !== 0) {\r\n        return callback();\r\n    }\r\n\r\n    var groupByRetinaName = _.keyBy(grouppedSources, 'retinaName');\r\n    var groupByNormalName = _.keyBy(grouppedSources, 'normalName');\r\n\r\n    var normalSpritesmithConfig = getSpritesmithConfig('normalName');\r\n    var retinaSpritesmithConfig = getSpritesmithConfig('retinaName');\r\n    retinaSpritesmithConfig.padding = (normalSpritesmithConfig.padding || 0) * 2;\r\n\r\n    async.waterfall([\r\n        async.parallel.bind(async, [\r\n            Spritesmith.run.bind(Spritesmith, normalSpritesmithConfig),\r\n            Spritesmith.run.bind(Spritesmith, retinaSpritesmithConfig)\r\n        ]),\r\n        function (results, callback) {\r\n            addCoordinates(groupByNormalName, 'normalCoordinates', results[0].coordinates);\r\n            addCoordinates(groupByRetinaName, 'retinaCoordinates', results[1].coordinates);\r\n\r\n            var normalSprites = getSpritesForSpritesheetTemplates('', 'normalCoordinates');\r\n            var retinaSprites = getSpritesForSpritesheetTemplates('retina_', 'retinaCoordinates');\r\n\r\n            var spritesheetTemplatesData = {\r\n                sprites: normalSprites,\r\n                spritesheet: {\r\n                    width: results[0].properties.width,\r\n                    height: results[0].properties.height,\r\n                    image: substitute(options.apiOptions.cssImageRef, results[0])\r\n                },\r\n                retina_sprites: retinaSprites,\r\n                retina_spritesheet: {\r\n                    width: results[1].properties.width,\r\n                    height: results[1].properties.height,\r\n                    image: substitute(options.retina.cssImageRef, results[1])\r\n                },\r\n                retina_groups: _.values(grouppedSources).map(function (sprite, i) {\r\n                    return {\r\n                        name: sprite.apiName,\r\n                        index: i\r\n                    };\r\n                })\r\n            };\r\n\r\n            var normalImageName = substitute(options.target.image, results[0]);\r\n            var retinaImageName = substitute(options.retina.targetImage, results[1]);\r\n\r\n            async.parallel([\r\n                writeCSS.bind(null, options.target.css, spritesheetTemplatesData),\r\n                writeFileR.bind(null, normalImageName, results[0].image, 'binary'),\r\n                writeFileR.bind(null, retinaImageName, results[1].image, 'binary')\r\n            ], callback)\r\n        }\r\n    ], function (err) {\r\n        if (err) {\r\n            metaOutput.errors.push(err);\r\n        }\r\n        callback();\r\n    });\r\n\r\n    function getSpritesForSpritesheetTemplates(prefix, field) {\r\n        return _.map(grouppedSources, function (sprite) {\r\n            return {\r\n                name: prefix + sprite.apiName,\r\n                x: sprite[field].x,\r\n                y: sprite[field].y,\r\n                width: sprite[field].width,\r\n                height: sprite[field].height\r\n            };\r\n        });\r\n    }\r\n\r\n    function addCoordinates(groups, coordinatesField, coordinates) {\r\n        _.forEach(coordinates, function(coordinates, name) {\r\n            groups[name][coordinatesField] = coordinates;\r\n        });\r\n    }\r\n\r\n    function getSpritesmithConfig(field) {\r\n        return _.merge({}, options.spritesmithOptions, {\r\n            src: _.map(grouppedSources, field)\r\n        });\r\n    }\r\n\r\n    function collectErrors() {\r\n        var errors = metaOutput.errors = [];\r\n        _.forEach(grouppedSources, function (group, name) {\r\n            if (group.retina && !group.normal) {\r\n                errors.push(new Error(\r\n                    'webpack-spritesmith: no normal source for sprite \"' + name +\r\n                    '\" expected file name is ' + group.normalName\r\n                ));\r\n            }\r\n            if (!group.retina && group.normal) {\r\n                errors.push(new Error(\r\n                    'webpack-spritesmith: no retina source for sprite \"' + name +\r\n                    '\" expected file name is ' + group.retinaName\r\n                ));\r\n            }\r\n        });\r\n    }\r\n};\r\n"}